#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <ctype.h>

#include "advertisement.h"
#include "cliente.h"
#include "utn.h"
#include "adclient.h"

static int idGenerate(void);

/**
 * \brief Function to add an Advertisement asking for name, last name, salary and sector. ID is generated automatically
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Advertisement array length
 * \return (-1) if something went wrong, (0) if everything is OK.
 */
int advertisement_add(Advertisement *list, int len, Client *clientList, int clientLen)
{
	int retornar = -1;
	Advertisement buffer;
	int index;
	int clientIndex;
	if(list != NULL && len > 0 && client_searchForNoEmpty(clientList, clientLen) == 0)
	{
		if(advertisement_searchEmpty(list, len, &index) == 0 && index >= 0 && client_print(clientList, clientLen) == 0 &&
		   utn_getInt("\nIngrese el ID del cliente: ", "\nERROR! Ingrese un ID valido: ", &buffer.clientID, 2, 1, 9999)==0 &&
		   client_findById(clientList, clientLen, buffer.clientID, &clientIndex) == 0 &&
		   utn_getInt("\nIngrese el numero de rubro: ", "\nERROR! Ingrese un numero de rubro valido: ", &buffer.sector, 2, SECTOR_MIN, SECTOR_MAX)==0 &&
		   utn_getString("Ingrese el texto del aviso: ", "\nERROR! Ingrese caracteres validos: ", buffer.adText, 2, ADTEXT_SIZE)==0)
		{
			buffer.id = idGenerate();
			buffer.isEmpty = FALSE;
			buffer.isActive = TRUE;
			list[index] = buffer;
			retornar = 0;
			printf("\nID para el nuevo aviso: %d", list[index].id);
		}
	}
	return retornar;
}

/**
 * \brief Function to modify an Advertisement searched by ID
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \return (-1) if something went wrong, (0) if everything is OK
 */
int advertisement_pauseAd(Advertisement *list, int len, Client *clientList, int clientLen)
{
	int retornar = -1;
	int id;
	int index;
	int choosedOption;
	if(list != NULL && len > 0 && clientList != NULL && clientLen>0 && advertisement_searchForNoEmptyAndActive(list, len) == 0)
	{
		advertisement_print(list, len);
		if(utn_getInt("\nIngrese el id de la publicacion a pausar: ", "\nError! Ingrese un ID valido: ", &id, 2, 1, 999) == 0 && advertisement_findById(list, len, id, &index)==0 &&
		   list[index].isActive == TRUE && advertisement_printAdbyClient(list, len, clientList, clientLen, id) == 0 &&
		   utn_getInt("\n\nQuiere pausar esta publicidad? presione 1 para SI o 2 para NO: " , "\nERROR! Ingrese 1 o 2 ", &choosedOption, 2, 1, 2)==0 && choosedOption == 1)
		{
			list[index].isActive = FALSE;
			retornar = 0;
		}
	}
	return retornar;
}

int advertisement_reanudeAd(Advertisement *list, int len, Client *clientList, int clientLen)
{
	int retornar = -1;
	int id;
	int index;
	int choosedOption;
	if(list != NULL && len > 0 && clientList != NULL && clientLen>0 && advertisement_searchForNoEmptyAndInactive(list, len) == 0)
	{
		advertisement_print(list, len);
		if(utn_getInt("\nIngrese el id de la publicacion a reanudar: ", "\nError! Ingrese un ID valido: ", &id, 2, 1, 999) == 0 && advertisement_findById(list, len, id, &index)==0 &&
		   list[index].isActive == FALSE && advertisement_printAdbyClient(list, len, clientList, clientLen, id) == 0 &&
		   utn_getInt("\n\nQuiere reanudar esta publicidad? presione 1 para SI o 2 para NO: " , "\nERROR! Ingrese 1 o 2 ", &choosedOption, 2, 1, 2)==0 && choosedOption == 1)
		{
			list[index].isActive = TRUE;
			retornar = 0;
		}
	}
	return retornar;
}

int advertisement_remove(Advertisement *list, int len, int id)
{
	int retornar = -1;
	if(list!=NULL && len>0)
	{
		for(int i=0;i<len;i++)
		{
			if(list[i].clientID == id && list[i].isEmpty == FALSE)
			{
				list[i].isEmpty = TRUE;
				retornar = 0;
			}
		}
	}
	return retornar;
}

int advertisement_printAdbyClient(Advertisement *list, int len, Client *clientList, int clientLen, int id)
{
	int retornar=-1;
	int index;
	if(list!=NULL && len>0 && clientList!=NULL && clientLen>0 && clientLen>0 && id>0)
	{
		if(advertisement_findById(list, len, id, &index)==0)
		{
			for(int i=0; i<clientLen;i++)
			{
				if(list[index].clientID == clientList[i].id)
				{
					printf("\nCliente: \nNombre: %s - Apellido: %s - Cuit: %s", clientList[i].name, clientList[i].lastName, clientList[i].cuit);
					retornar = 0;
				}
			}
		}
	}

	return retornar;
}

/**
 * \brief Function to print all the Advertisements in the array
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \return (-1) if something went wrong, (0) if everything is OK
 */
int advertisement_print(Advertisement *list, int len)
{
	int retorno = -1;
	if(list != NULL && len > 0)
	{
		printf("\nESTADO: || 1 = activo || 0 = pausado ||");
		for(int i=0;i<len;i++)
		{
			if(list[i].isEmpty == FALSE)
			{
				printf("\nID: %d - Estado: %d - texto: %s",list[i].id, list[i].isActive,list[i].adText);
				retorno = 0;
			}
		}
	}
	return retorno;
}

int advertisement_adCounterEachClient(Advertisement *adList, int adLen, int id, int *pCounter)
{
	int retornar=-1;
	int counter=0;
	if(adList!=NULL && adLen>0)
	{
		for(int i=0;i<adLen;i++)
		{
			if(adList[i].clientID == id)
			{
				counter++;
				retornar = 0;
			}
		}
		*pCounter = counter;
	}
	return retornar;
}

int advertisement_activeAdCounterEachClient(Advertisement *adList, int adLen, int id, int *pCounter)
{
	int retornar=-1;
	int counter=0;
	if(adList!=NULL && adLen>0)
	{
		for(int i=0;i<adLen;i++)
		{
			if(adList[i].clientID == id && adList[i].isActive == TRUE)
			{
				counter++;
				retornar = 0;
			}
		}
		*pCounter = counter;
	}
	return retornar;
}

int advertisement_pausedAdsQty(Advertisement *adList, int adLen, int *pCounter)
{
	int retornar=-1;
	int counter=0;
	if(adList!=NULL && adLen>0)
	{
		for(int i=0;i<adLen;i++)
		{
			if(adList[i].isActive == FALSE)
			{
				counter++;
				retornar = 0;
			}
		}
		*pCounter = counter;
	}
	return retornar;
}



/**
 * \brief Function to search in the Advertisement array for an no empty field
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \return (-1) if something went wrong, (0) if everything is OK
 */

int advertisement_searchForNoEmptyAndActive(Advertisement *list, int len)
{
	int retornar = -1;
	if(list != NULL && len > 0)
	{
		for(int i=0; i<len; i++)
		{
			if(list[i].isEmpty == FALSE && list[i].isActive == TRUE)
			{
				retornar = 0;
				break;
			}
		}
	}
	return retornar;
}

int advertisement_searchForNoEmptyAndInactive(Advertisement *list, int len)
{
	int retornar = -1;
	if(list != NULL && len > 0)
	{
		for(int i=0; i<len; i++)
		{
			if(list[i].isEmpty == FALSE && list[i].isActive == FALSE)
			{
				retornar = 0;
				break;
			}
		}
	}
	return retornar;
}

/**
 * \brief Function to init isEmpty to TRUE of an Advertisement array
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \return (-1) if something went wrong, (0) if everything is OK
 */
int advertisement_init(Advertisement* list, int len)
{
	int retornar = -1;
	if(list != NULL && len > 0)
	{
		for(int i=0;i<len;i++)
		{
			list[i].isEmpty = TRUE;
			list[i].isActive = -1;
			list[i].id = -1;
		}
		retornar = 0;
	}
	return retornar;
}

/**
 * \brief Function that returns the first index found on an Advertisement array that is empty
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \param int *pIndex: pointer of the index
 * \return (-1) if something went wrong, (0) if everything is OK
 */
int advertisement_searchEmpty(Advertisement *list, int len, int *pIndex)
{
	int retornar = -1;
	if(list != NULL)
	{
		for(int i = 0; i < len; i++)
		{
			if(list[i].isEmpty == TRUE && list[i].id == -1)
			{
				retornar = 0;
				*pIndex = i;
				break;
			}
		}
	}
	return retornar;
}

/**
 * \brief Function to auto-generate an ID
 * \return the id
 */
static int idGenerate(void)
{
	static int id=0;
	id = id+1;
	return id;
}

/**
 * \brief Function to find an Advertisement index receiving an id
 * \param Advertisement *list: Pointer to an Advertisement array
 * \param int len: Length of the array
 * \param int id: receive the id to be searched
 * \return the index or (-1) if something went wrong
 */
int advertisement_findById(Advertisement *list, int len, int id, int *pIndex)
{
	int retornar = -1;
	if(list != NULL && len > 0 && id > 0)
	{
		for(int i=0; i < len; i++)
		{
			if(list[i].id == id && list[i].isEmpty == FALSE && (list[i].isActive == TRUE || list[i].isActive == FALSE))
			{
				*pIndex = i;
				retornar = 0;
				break;
			}
		}
	}
	return retornar;
}

int advertisement_findByClientId(Advertisement *list, int len, int id)
{
	int retornar = -1;
	if(list != NULL && len > 0 && id > 0)
	{
		for(int i=0; i < len; i++)
		{
			if(list[i].clientID == id && list[i].isEmpty == FALSE && (list[i].isActive == TRUE || list[i].isActive == FALSE))
			{
				retornar = i;
				break;
			}
		}
	}
	return retornar;
}

int advertisement_sectorMaxQtyAds(Advertisement *list, int len)
{
	int retornar=-1;
	int counter=0;
	if(list!=NULL && len>0)
	{
		for(int i=0;i<len;i++)
		{
			for(int j=0; i<len;i++)
			{
				if(list[j].sector == list[i].sector)
				{
					counter++;
					if(retornar==-1)
					{
						retornar=0;
					}
				}
			}
		}
	}
	return retornar;
}
