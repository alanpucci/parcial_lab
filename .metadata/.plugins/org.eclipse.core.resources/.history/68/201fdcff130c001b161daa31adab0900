#ifndef advertisement_H_
#define advertisement_H_
#include "cliente.h"

#define TRUE 1
#define FALSE 0
#define NAME_SIZE 51
#define ARRAYAD_SIZE 1000
#define ADTEXT_SIZE 65
#define SECTOR_MIN 0
#define SECTOR_MAX 999

typedef struct
{
	int id;
	int clientID;
	int sector;
	char adText[ADTEXT_SIZE];
	int isEmpty;
	int isActive;
}Advertisement;

int advertisement_init(Advertisement* list, int len);
int advertisement_add(Advertisement *list, int len, Client *fantasmaList, int fantasmaLen);
int advertisement_modify(Advertisement *list, int len);
int advertisement_pauseAd(Advertisement *list, int len, Client *clientList, int clientLen);
int advertisement_report(Advertisement *list, int len);

int advertisement_searchForNoEmptyAndActive(Advertisement *list, int len);
int advertisement_searchEmpty(Advertisement *list, int len, int *pIndex);
int advertisement_findById(Advertisement *list, int len, int id, int *pIndex);
int advertisement_print(Advertisement *list, int len);
int advertisement_sort(Advertisement *list, int len, int order);
int advertisement_printAdbyClient(Advertisement *list, int len, Client *clientList, int clientLen, int id);
int advertisement_reanudeAd(Advertisement *list, int len, Client *clientList, int clientLen);
int advertisement_searchForNoEmptyAndInactive(Advertisement *list, int len);
int advertisement_findByClientId(Advertisement *list, int len, int id);
int advertisement_remove(Advertisement *list, int len, int id);
int advertisement_adCounterEachClient(Advertisement *adList, int adLen, Client *clientList, int clientLen, int id, int *pCounter);

#endif
